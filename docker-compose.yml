services:
  db:
    image: postgres:15-alpine
    container_name: ps_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ps_shortener
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  nest-prod:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: ${DATABASE_URL}
      BASE_URL: ${BASE_URL}
    ports:
      - '3001:3000'
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - prod
    networks:
      - app-network
    command: >
      sh -c "npx prisma migrate deploy &&
             node dist/main.js"

  nest-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
      JWT_SECRET: jwt/secret/123456
      BASE_URL: http://localhost:3000
      DATABASE_URL: postgres://postgres:postgres@db:5432/ps_shortener
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - nest_shortener_url_node_modules:/app/node_modules
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - app-network
    command: >
      sh -c "npx prisma migrate deploy &&
             npm run start:dev"

  nest-test:
    image: node:22-alpine
    working_dir: /app
    volumes:
      - .:/app:delegated
      - npm-cache:/root/.npm
    command: >
      sh -c "if [ ! -d node_modules ]; then npm ci; fi &&
             npm run test && npm run test:e2e"

  prisma-studio:
    image: node:lts-alpine3.17
    container_name: prisma_studio
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
    command: npx prisma studio --port 5555 --browser none
    ports:
      - '5555:5555'
    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/ps_shortener
    depends_on:
      db:
        condition: service_healthy
      nest-dev:
        condition: service_started
    profiles:
      - dev
    networks:
      - app-network

volumes:
  db_data:
  npm-cache:
  nest_shortener_url_node_modules:

networks:
  app-network:
    driver: bridge